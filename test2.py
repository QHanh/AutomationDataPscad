import mhi.pscad
import os
import pandas as pd
from datetime import datetime

# ======================== C·∫§U H√åNH ========================
file_path = os.path.abspath('C:\\Users\\hqh14\\OneDrive\\Desktop\\08_19_2025_PSCAD_Model_CN_rev1') + "\\"
file_name = "main_3LG"
canvas_name = "Main"  # Ho·∫∑c "main" t√πy project

# ======================== 1. EXPORT RA EXCEL ========================
def export_to_excel(output_file="pscad_components.xlsx"):
    """Export t·∫•t c·∫£ components v√† parameters ra Excel"""
    
    with mhi.pscad.connect() as pscad:
        pscad.load(file_path + file_name + ".pscx")
        proj = pscad.project(file_name)
        canvas = proj.canvas(canvas_name)
        components = canvas.components()
        
        print(f"üì¶ ƒêang export {len(components)} components...")
        
        # Chu·∫©n b·ªã d·ªØ li·ªáu
        data = []
        
        for i, comp in enumerate(components, 1):
            # L·∫•y Component ID (IID - unique identifier)
            try:
                comp_iid = comp.iid
            except:
                comp_iid = f"unknown_{i}"
            
            # L·∫•y v·ªã tr√≠ component
            try:
                comp_bounds = str(comp.bounds)
            except:
                comp_bounds = "N/A"
            
            # L·∫•y definition name (lo·∫°i component)
            try:
                defn = comp.definition
                defn_name = str(defn).split('[')[-1].split(']')[0] if '[' in str(defn) else str(defn)
            except:
                defn_name = "Unknown"
            
            # L·∫•y parameters
            try:
                all_params = comp.parameters()  # D√πng parameters() thay v√¨ get_parameters()
                
                # L·∫•y t√™n component t·ª´ parameter Name n·∫øu c√≥
                comp_name = ""
                if all_params and 'Name' in all_params:
                    comp_name = str(all_params['Name'])
                
                if all_params:
                    for param_name, param_value in all_params.items():
                        data.append({
                            'Component_Index': i,
                            'Component_IID': str(comp_iid),
                            'Component_Name': comp_name,
                            'Component_Type': defn_name,
                            'Component_Location': comp_bounds,
                            'Parameter_Name': param_name,
                            'Current_Value': str(param_value),
                            'New_Value': '',  # C·ªôt ƒë·ªÉ user nh·∫≠p gi√° tr·ªã m·ªõi
                            'Notes': ''  # C·ªôt ghi ch√∫
                        })
                else:
                    # Component kh√¥ng c√≥ parameters
                    data.append({
                        'Component_Index': i,
                        'Component_IID': str(comp_iid),
                        'Component_Name': comp_name,
                        'Component_Type': defn_name,
                        'Component_Location': comp_bounds,
                        'Parameter_Name': 'N/A',
                        'Current_Value': 'N/A',
                        'New_Value': '',
                        'Notes': 'No parameters'
                    })
            except Exception as e:
                print(f"  ‚ö†Ô∏è  Component {i} (IID: {comp_iid}): L·ªói - {e}")
            
            if i % 20 == 0:
                print(f"  ‚úì ƒê√£ x·ª≠ l√Ω {i}/{len(components)} components")
        
        # T·∫°o DataFrame v√† export
        df = pd.DataFrame(data)
        
        # Ki·ªÉm tra file c√≥ ƒëang m·ªü kh√¥ng
        try:
            # Th·ª≠ m·ªü file ƒë·ªÉ ki·ªÉm tra
            with open(output_file, 'a'):
                pass
        except PermissionError:
            # File ƒëang ƒë∆∞·ª£c m·ªü, t·∫°o t√™n file m·ªõi
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            base_name = output_file.rsplit('.', 1)[0]
            output_file = f"{base_name}_{timestamp}.xlsx"
            print(f"‚ö†Ô∏è  File g·ªëc ƒëang m·ªü, l∆∞u v√†o: {output_file}")
        
        # T·∫°o file Excel v·ªõi formatting
        with pd.ExcelWriter(output_file, engine='openpyxl') as writer:
            df.to_excel(writer, sheet_name='Components', index=False)
            
            # Format Excel
            worksheet = writer.sheets['Components']
            
            # Auto-fit columns
            for column in worksheet.columns:
                max_length = 0
                column_letter = column[0].column_letter
                for cell in column:
                    try:
                        if len(str(cell.value)) > max_length:
                            max_length = len(str(cell.value))
                    except:
                        pass
                adjusted_width = min(max_length + 2, 50)
                worksheet.column_dimensions[column_letter].width = adjusted_width
            
            # Freeze header row
            worksheet.freeze_panes = 'A2'
            
            # T·∫°o sheet Instructions
            instructions = pd.DataFrame({
                'Step': [1, 2, 3, 4],
                'Instruction': [
                    'M·ªü sheet "Components"',
                    'T√¨m parameters c·∫ßn thay ƒë·ªïi',
                    'Nh·∫≠p gi√° tr·ªã m·ªõi v√†o c·ªôt "New_Value"',
                    'L∆∞u file v√† ch·∫°y import_from_excel() trong Python'
                ],
                'Example': [
                    '',
                    'T√¨m component c√≥ t√™n "Vrms" ho·∫∑c type "master:pgb"',
                    'V√≠ d·ª•: thay ƒë·ªïi "Max" t·ª´ "2.0" th√†nh "5.0"',
                    'import_from_excel("pscad_components.xlsx", dry_run=False)'
                ]
            })
            instructions.to_excel(writer, sheet_name='Instructions', index=False)
        
        print(f"\n‚úÖ Export th√†nh c√¥ng!")
        print(f"üìÅ File: {output_file}")
        print(f"üìä T·ªïng s·ªë parameters: {len(data)}")
        print(f"üìä T·ªïng s·ªë components: {len(df['Component_Index'].unique())}")
        print(f"\nüí° H∆∞·ªõng d·∫´n:")
        print(f"   1. M·ªü file Excel")
        print(f"   2. Xem sheet 'Instructions' ƒë·ªÉ bi·∫øt c√°ch s·ª≠ d·ª•ng")
        print(f"   3. Nh·∫≠p gi√° tr·ªã m·ªõi v√†o c·ªôt 'New_Value' trong sheet 'Components'")
        print(f"   4. Ch·∫°y import_from_excel() ƒë·ªÉ c·∫≠p nh·∫≠t v√†o PSCAD")


# ======================== 2. IMPORT T·ª™ EXCEL ========================
def import_from_excel(excel_file="pscad_components.xlsx", dry_run=True):
    """
    Import v√† update parameters t·ª´ Excel v√†o PSCAD
    
    Args:
        excel_file: ƒê∆∞·ªùng d·∫´n file Excel
        dry_run: True = ch·ªâ hi·ªÉn th·ªã thay ƒë·ªïi, False = th·ª±c s·ª± update
    """
    
    # ƒê·ªçc file Excel
    print(f"üìñ ƒêang ƒë·ªçc file: {excel_file}")
    df = pd.read_excel(excel_file, sheet_name='Components')
    
    # L·ªçc c√°c d√≤ng c√≥ New_Value kh√¥ng r·ªóng
    df_changes = df[df['New_Value'].notna() & (df['New_Value'] != '')]
    
    if len(df_changes) == 0:
        print("‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y gi√° tr·ªã m·ªõi n√†o trong c·ªôt 'New_Value'")
        return
    
    print(f"üìù T√¨m th·∫•y {len(df_changes)} thay ƒë·ªïi")
    print("\n" + "="*70)
    
    # Nh√≥m theo Component_IID (unique identifier)
    changes_by_iid = df_changes.groupby('Component_IID')
    
    with mhi.pscad.connect() as pscad:
        pscad.load(file_path + file_name + ".pscx")
        proj = pscad.project(file_name)
        canvas = proj.canvas(canvas_name)
        components = canvas.components()
        
        # T·∫°o mapping t·ª´ IID sang component object
        comp_map = {}
        for comp in components:
            try:
                comp_map[str(comp.iid)] = comp
            except:
                pass
        
        update_count = 0
        error_count = 0
        
        for comp_iid, changes in changes_by_iid:
            comp_iid_str = str(comp_iid)
            
            # T√¨m component theo IID
            if comp_iid_str not in comp_map:
                print(f"‚ùå Component IID {comp_iid}: Kh√¥ng t√¨m th·∫•y")
                error_count += 1
                continue
            
            comp = comp_map[comp_iid_str]
            
            # L·∫•y th√¥ng tin component
            try:
                comp_name = changes.iloc[0]['Component_Name']
                comp_type = changes.iloc[0]['Component_Type']
                comp_idx = changes.iloc[0]['Component_Index']
            except:
                comp_name = ""
                comp_type = "Unknown"
                comp_idx = "?"
            
            display_name = f"[{comp_idx}] {comp_type}"
            if comp_name:
                display_name += f" ({comp_name})"
            
            print(f"\nüîß {display_name}")
            print(f"   IID: {comp_iid}")
            
            # Chu·∫©n b·ªã dictionary parameters ƒë·ªÉ update
            params_to_update = {}
            
            for _, row in changes.iterrows():
                param_name = row['Parameter_Name']
                old_value = row['Current_Value']
                new_value = row['New_Value']
                
                print(f"   ‚Ä¢ {param_name}: '{old_value}' ‚Üí '{new_value}'")
                params_to_update[param_name] = str(new_value)
            
            # Update parameters
            if not dry_run:
                try:
                    # D√πng c√°ch m·ªõi: comp.parameters(**params) thay v√¨ comp.set_parameters()
                    comp.parameters(**params_to_update)
                    print(f"   ‚úÖ ƒê√£ update th√†nh c√¥ng!")
                    
                    # Verify ngay sau khi update
                    updated_params = comp.parameters()  # D√πng parameters() thay v√¨ get_parameters()
                    print(f"   üîç Verify:")
                    for param_name in params_to_update.keys():
                        actual = updated_params.get(param_name, 'N/A')
                        expected = params_to_update[param_name]
                        if str(actual) == str(expected):
                            print(f"      ‚úì {param_name} = {actual}")
                        else:
                            print(f"      ‚úó {param_name}: expected '{expected}', got '{actual}'")
                    
                    update_count += 1
                except Exception as e:
                    print(f"   ‚ùå L·ªói update: {e}")
                    error_count += 1
            else:
                print(f"   ‚ÑπÔ∏è  DRY RUN - kh√¥ng th·ª±c s·ª± update")
                update_count += 1
        
        # Save project n·∫øu kh√¥ng ph·∫£i dry run
        if not dry_run:
            try:
                print(f"\nüíæ ƒêang l∆∞u project...")
                proj.save()
                print(f"‚úÖ ƒê√£ l∆∞u project th√†nh c√¥ng!")
                
                # Unload v√† load l·∫°i ƒë·ªÉ force PSCAD GUI refresh
                print(f"üîÑ ƒêang unload project...")
                proj.unload()
                print(f"‚úÖ ƒê√£ unload!")
                
                print(f"üì• ƒêang load l·∫°i project...")
                pscad.load(file_path + file_name + ".pscx")
                print(f"‚úÖ ƒê√£ load l·∫°i project!")
                print(f"\nüí° PSCAD GUI ƒë√£ ƒë∆∞·ª£c refresh. Ki·ªÉm tra l·∫°i component trong GUI.")
                
            except Exception as e:
                print(f"‚ùå L·ªói: {e}")
        
        print("\n" + "="*70)
        print(f"üìä T√≥m t·∫Øt:")
        print(f"   ‚Ä¢ Th√†nh c√¥ng: {update_count}")
        print(f"   ‚Ä¢ L·ªói: {error_count}")
        
        if dry_run:
            print(f"\nüí° ƒê√¢y l√† DRY RUN mode. ƒê·ªÉ th·ª±c s·ª± update, ch·∫°y:")
            print(f"   import_from_excel('{excel_file}', dry_run=False)")


# ======================== 3. TI·ªÜN √çCH ========================
def export_by_type(component_type, output_file=None):
    """
    Export ch·ªâ m·ªôt lo·∫°i component c·ª• th·ªÉ
    
    Args:
        component_type: T√™n lo·∫°i component, v√≠ d·ª• 'master:multimeter'
        output_file: T√™n file output (t·ª± ƒë·ªông n·∫øu None)
    """
    
    if output_file is None:
        safe_type = component_type.replace(':', '_').replace('/', '_')
        output_file = f"components_{safe_type}.xlsx"
    
    with mhi.pscad.connect() as pscad:
        pscad.load(file_path + file_name + ".pscx")
        proj = pscad.project(file_name)
        canvas = proj.canvas(canvas_name)
        components = canvas.components()
        
        data = []
        
        for i, comp in enumerate(components, 1):
            try:
                comp_iid = comp.iid
                comp_bounds = str(comp.bounds)
                defn = comp.definition
                defn_name = str(defn).split('[')[-1].split(']')[0] if '[' in str(defn) else str(defn)
            except:
                continue
            
            # Filter theo type
            if defn_name != component_type:
                continue
            
            try:
                all_params = comp.get_parameters()
                comp_name = ""
                if all_params and 'Name' in all_params:
                    comp_name = str(all_params['Name'])
                
                if all_params:
                    for param_name, param_value in all_params.items():
                        data.append({
                            'Component_Index': i,
                            'Component_IID': str(comp_iid),
                            'Component_Name': comp_name,
                            'Component_Type': defn_name,
                            'Component_Location': comp_bounds,
                            'Parameter_Name': param_name,
                            'Current_Value': str(param_value),
                            'New_Value': '',
                            'Notes': ''
                        })
            except:
                pass
        
        if len(data) == 0:
            print(f"‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y component n√†o c√≥ type: {component_type}")
            return
        
        df = pd.DataFrame(data)
        df.to_excel(output_file, index=False)
        
        print(f"‚úÖ Export {len(data)} parameters t·ª´ {len(df['Component_Index'].unique())} components")
        print(f"üìÅ File: {output_file}")


def list_component_types():
    """Li·ªát k√™ t·∫•t c·∫£ c√°c lo·∫°i components trong project"""
    
    with mhi.pscad.connect() as pscad:
        pscad.load(file_path + file_name + ".pscx")
        proj = pscad.project(file_name)
        canvas = proj.canvas(canvas_name)
        components = canvas.components()
        
        types = {}
        
        for comp in components:
            try:
                defn = comp.definition
                defn_name = str(defn).split('[')[-1].split(']')[0] if '[' in str(defn) else str(defn)
                types[defn_name] = types.get(defn_name, 0) + 1
            except:
                pass
        
        print(f"üìä T·ªïng s·ªë: {len(components)} components\n")
        print("Component Types:")
        print("-" * 50)
        
        for comp_type, count in sorted(types.items(), key=lambda x: x[1], reverse=True):
            print(f"  {comp_type}: {count}")


# ======================== WORKFLOW AN TO√ÄN ========================
def safe_import(excel_file="pscad_components.xlsx", dry_run=False):
    """
    Import an to√†n - c·∫£nh b√°o n·∫øu PSCAD GUI ƒëang ch·∫°y
    """
    import subprocess
    
    # Ki·ªÉm tra PSCAD c√≥ ƒëang ch·∫°y kh√¥ng
    try:
        result = subprocess.run(['tasklist', '/FI', 'IMAGENAME eq PSCAD*.exe'], 
                              capture_output=True, text=True)
        
        if 'PSCAD' in result.stdout:
            print("\n" + "="*70)
            print("‚ö†Ô∏è  C·∫¢NH B√ÅO: PSCAD GUI ƒêANG CH·∫†Y!")
            print("="*70)
            print("\nƒê·ªÉ thay ƒë·ªïi hi·ªÉn th·ªã trong GUI, b·∫°n C·∫¶N:")
            print("  1. ƒê√≥ng PSCAD GUI ho√†n to√†n")
            print("  2. Ch·∫°y l·∫°i h√†m n√†y")
            print("  3. Sau khi update xong, m·ªü PSCAD GUI v√† load project")
            print("\nüí° Gi√° tr·ªã V·∫™N S·∫º ƒê∆Ø·ª¢C L∆ØU v√†o file, nh∆∞ng GUI kh√¥ng refresh!")
            print("="*70)
            
            response = input("\nB·∫°n c√≥ mu·ªën ti·∫øp t·ª•c? (y/n): ")
            if response.lower() != 'y':
                print("ƒê√£ h·ªßy.")
                return
    except:
        pass  # Kh√¥ng check ƒë∆∞·ª£c c≈©ng kh√¥ng sao
    
    # Th·ª±c hi·ªán import
    import_from_excel(excel_file, dry_run)


# ======================== S·ª¨ D·ª§NG ========================
if __name__ == "__main__":
    print("""
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë           PSCAD PARAMETER MANAGEMENT TOOL                    ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    
    WORKFLOW KHUY·∫æN NGH·ªä:
    
    1. Export parameters:
       export_to_excel("params.xlsx")
    
    2. S·ª≠a file Excel (c·ªôt "New_Value")
    
    3. ƒê√ìNG PSCAD GUI ho√†n to√†n
    
    4. Import v√† update:
       safe_import("params.xlsx", dry_run=False)
    
    5. M·ªü PSCAD GUI v√† load project ƒë·ªÉ xem thay ƒë·ªïi
    
    ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    """)
    
    # 1. Xem danh s√°ch c√°c lo·∫°i components
    # list_component_types()
    
    # 2. Export t·∫•t c·∫£ ra Excel
    # export_to_excel("pscad_components.xlsx")
    
    # 3. Export ch·ªâ m·ªôt lo·∫°i component
    # export_by_type("master:multimeter", "multimeters.xlsx")
    
    # 4. Sau khi s·ª≠a Excel, xem tr∆∞·ªõc thay ƒë·ªïi (DRY RUN)
    # safe_import("pscad_components.xlsx", dry_run=True)
    
    # 5. Update th·ª±c s·ª± v√†o PSCAD (ƒê√ìNG PSCAD GUI TR∆Ø·ªöC)
    safe_import("pscad_components.xlsx", dry_run=False)