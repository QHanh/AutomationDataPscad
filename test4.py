import streamlit as st
import pandas as pd
import re, os, tempfile, time
import xlsxwriter
from scipy.signal import find_peaks
from PIL import ImageGrab
import win32com.client, pythoncom

# M·∫£ng m√†u cho c√°c ƒë∆∞·ªùng bi·ªÉu ƒë·ªì (gi·ªØ nguy√™n)
COLORS = ["#0072BD", "#D95319", "#EDB120", "#7E2F8E", "#77AC30", "#4DBEEE", "#A2142F"]

# --- C√°c h√†m x·ª≠ l√Ω file (gi·ªØ nguy√™n) ---
def parse_inf(inf_text):
    pgb_map = {}
    for line in inf_text.splitlines():
        line = line.strip()
        if line.startswith("PGB("):
            idx = int(line.split("(")[1].split(")")[0])
            desc = re.search(r'Desc="([^"]+)"', line)
            pgb_map[idx] = desc.group(1) if desc else f"PGB{idx}"
    return pgb_map

def extract_num(filename):
    match = re.search(r"(\d+)", filename)
    return int(match.group(1)) if match else 9999

# --- H√ÄM T·∫†O EXCEL V·ªöI BI·ªÇU ƒê·ªí NH√öNG ---
def generate_excel_with_chart(df, selected_cols, temp_dir):
    """
    T·∫°o file Excel ch·ª©a c·∫£ d·ªØ li·ªáu v√† bi·ªÉu ƒë·ªì nh√∫ng.
    Tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n ƒë·∫øn file Excel ƒë√£ t·∫°o.
    """
    xl_path = os.path.join(temp_dir, "AllData.xlsx")

    workbook = xlsxwriter.Workbook(xl_path)
    worksheet = workbook.add_worksheet("Sheet1")
    chart = workbook.add_chart({'type': 'scatter', 'subtype': 'smooth'})

    # Ghi t√™n c·ªôt v√† d·ªØ li·ªáu
    worksheet.write(0, 0, "Time")
    worksheet.write_column(1, 0, df["Time"])
    
    for col_idx, col_name in enumerate(selected_cols, start=1):
        worksheet.write(0, col_idx, col_name)
        worksheet.write_column(1, col_idx, df[col_name])

    # Th√™m c√°c series d·ªØ li·ªáu v√†o bi·ªÉu ƒë·ªì
    num_rows = len(df)
    for i, col_name in enumerate(selected_cols):
        # L·∫•y ch·ªØ c√°i c·ªßa c·ªôt trong Excel (B, C, D, ...)
        col_letter = chr(66 + i) 
        chart.add_series({
            'name':       f"=Sheet1!${col_letter}$1",
            'categories': f"=Sheet1!$A$2:$A${num_rows + 1}",
            'values':     f"=Sheet1!${col_letter}$2:${col_letter}${num_rows + 1}",
            'line':       {'color': COLORS[i % len(COLORS)], 'width': 1.5}
        })

    # T√πy ch·ªânh giao di·ªán bi·ªÉu ƒë·ªì (gi·ªëng v·ªõi file app_auto_process_out_pscad.py)
    chart.set_x_axis({
        'name': 'Frequency Order',
        'name_font': {'name': 'Times New Roman', 'size': 9, 'bold': True},
        'num_font': {'name': 'Times New Roman', 'size': 9},
        'min': 0,
        'max': 50
    })
    chart.set_y_axis({
        'name': 'Impedance (Ohms)',
        'name_font': {'name': 'Times New Roman', 'size': 9, 'bold': True},
        'num_font': {'name': 'Times New Roman', 'size': 9}
    })
    chart.set_legend({'position': 'top', 'font': {'name': 'Times New Roman', 'size': 9}})
    chart.set_style(15)

    # Ch√®n bi·ªÉu ƒë·ªì v√†o worksheet v√† ph√≥ng to
    worksheet.insert_chart('E2', chart, {'x_scale': 2, 'y_scale': 2})
    workbook.close()

    return xl_path

# --- H√ÄM L∆ØU BI·ªÇU ƒê·ªí T·ª™ EXCEL RA PNG (D√ôNG WIN32COM) ---
def save_excel_graph_as_png(input_excel_path, output_png_path):
    """
    M·ªü file Excel, sao ch√©p bi·ªÉu ƒë·ªì v√† l∆∞u th√†nh file PNG.
    ƒê√¢y l√† b∆∞·ªõc ch·∫≠m v√† ph·ª• thu·ªôc v√†o m√¥i tr∆∞·ªùng.
    """
    pythoncom.CoInitialize()
    excel = None
    try:
        excel = win32com.client.Dispatch("Excel.Application")
        excel.Visible = False
        excel.DisplayAlerts = False
        
        abs_path = os.path.abspath(input_excel_path)
        wb = excel.Workbooks.Open(abs_path)
        sheet = wb.Sheets(1)
        
        # ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ Excel c√≥ th·ªùi gian render bi·ªÉu ƒë·ªì
        time.sleep(2)

        # T√¨m bi·ªÉu ƒë·ªì trong sheet v√† sao ch√©p
        for shape in sheet.Shapes:
            if "Chart" in shape.Name:
                shape.Copy()
                image = ImageGrab.grabclipboard()
                if image:
                    image.save(output_png_path, 'PNG')
                break
        wb.Close(SaveChanges=False)
    except Exception as e:
        st.error(f"L·ªói khi t∆∞∆°ng t√°c v·ªõi Excel: {e}")
        st.warning("H√£y ƒë·∫£m b·∫£o b·∫°n ƒëang ch·∫°y tr√™n Windows v√† ƒë√£ c√†i ƒë·∫∑t Microsoft Excel.")
    finally:
        if excel:
            excel.Quit()
        pythoncom.CoUninitialize()

# --- Giao di·ªán Streamlit ---
st.set_page_config(page_title="HVRT Data Viewer", layout="wide")
st.title("üìä HVRT Data Visualization")

# ... (Ph·∫ßn upload file gi·ªØ nguy√™n) ...
st.subheader("1. Upload file INF")
inf_file = st.file_uploader("Ch·ªçn file .inf", type=["inf"])

st.subheader("2. Upload c√°c file OUT")
st.info("‚ö†Ô∏è H√£y upload file .out theo th·ª© t·ª±, ho·∫∑c h·ªá th·ªëng s·∫Ω d·ª±a v√†o s·ªë th·ª© t·ª± trong t√™n file.")
out_files = st.file_uploader("Ch·ªçn nhi·ªÅu file .out", type=["out"], accept_multiple_files=True)

if inf_file and out_files:
    if st.button("‚úÖ X√°c nh·∫≠n", type="primary"):
        with st.spinner("ƒêang x·ª≠ l√Ω d·ªØ li·ªáu..."):
            pgb_map = parse_inf(inf_file.read().decode("utf-8", errors="ignore"))
            out_files_sorted = sorted(out_files, key=lambda f: extract_num(f.name))
            df_all, start_idx = None, 1
            for f in out_files_sorted:
                df = pd.read_csv(f, sep=r"\s+", header=None)
                col_names = ["Time"] + [pgb_map.get(i, f"PGB{i}") for i in range(start_idx, start_idx + df.shape[1] - 1)]
                df.columns = col_names
                if df_all is None:
                    df_all = df
                else:
                    df_all = df_all.merge(df, on="Time", how="outer")
                start_idx += df.shape[1] - 1
            st.session_state["df_all"] = df_all
            st.success("ƒê·ªçc v√† gh√©p d·ªØ li·ªáu th√†nh c√¥ng!")

if "df_all" in st.session_state:
    df_all = st.session_state["df_all"]
    options = [c for c in df_all.columns if c != "Time"]
    selected_cols = st.multiselect("Ch·ªçn c√°c c·ªôt ƒë·ªÉ hi·ªÉn th·ªã", options, default=options[:3] if len(options) > 2 else options)

    if st.button("üìä V·∫Ω bi·ªÉu ƒë·ªì v√† xu·∫•t file", type="primary"):
        if selected_cols:
            with st.spinner("ƒêang t·∫°o file Excel v√† tr√≠ch xu·∫•t bi·ªÉu ƒë·ªì... Vui l√≤ng ƒë·ª£i, qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t m·ªôt l√∫c."):
                # S·ª≠ d·ª•ng th∆∞ m·ª•c t·∫°m ƒë·ªÉ l∆∞u file
                with tempfile.TemporaryDirectory() as temp_dir:
                    # 1. T·∫°o file Excel v·ªõi bi·ªÉu ƒë·ªì nh√∫ng
                    xl_path = generate_excel_with_chart(df_all, selected_cols, temp_dir)
                    
                    # 2. M·ªü file Excel ƒë√≥ ƒë·ªÉ tr√≠ch xu·∫•t bi·ªÉu ƒë·ªì ra PNG
                    png_path = os.path.join(temp_dir, "Chart.png")
                    save_excel_graph_as_png(xl_path, png_path)

                    # 3. ƒê·ªçc d·ªØ li·ªáu t·ª´ c√°c file ƒë√£ t·∫°o ƒë·ªÉ cung c·∫•p cho vi·ªác t·∫£i xu·ªëng
                    if os.path.exists(xl_path):
                        with open(xl_path, "rb") as f:
                            excel_bytes = f.read()
                        st.session_state['excel_bytes'] = excel_bytes
                    else:
                        st.session_state['excel_bytes'] = None
                        
                    if os.path.exists(png_path):
                        with open(png_path, "rb") as f:
                            png_bytes = f.read()
                        st.session_state['png_bytes'] = png_bytes
                    else:
                        st.session_state['png_bytes'] = None

            # Hi·ªÉn th·ªã k·∫øt qu·∫£ sau khi x·ª≠ l√Ω xong
            if st.session_state.get('png_bytes'):
                st.image(st.session_state['png_bytes'], caption="Bi·ªÉu ƒë·ªì ƒë∆∞·ª£c tr√≠ch xu·∫•t t·ª´ file Excel")

                col1, col2 = st.columns(2)
                if st.session_state.get('excel_bytes'):
                    col1.download_button("üì• T·∫£i file Excel (c√≥ bi·ªÉu ƒë·ªì)", st.session_state['excel_bytes'], file_name="AllData_with_Chart.xlsx")
                col2.download_button("üñº T·∫£i file ·∫£nh (.png)", st.session_state['png_bytes'], file_name="DataChart.png")
            else:
                 st.error("Kh√¥ng th·ªÉ t·∫°o file ·∫£nh. Vui l√≤ng ki·ªÉm tra l·∫°i m√¥i tr∆∞·ªùng v√† ƒë·∫£m b·∫£o Excel ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t.")

            # Ph√¢n t√≠ch v√† hi·ªÉn th·ªã peaks (gi·ªØ nguy√™n)
            st.subheader("üîé Ph√¢n t√≠ch Peaks")
            for c in selected_cols:
                peaks, _ = find_peaks(df_all[c].dropna(), height=1)
                if len(peaks) > 0:
                    st.write(f"**{c}** c√≥ {len(peaks)} peaks t·∫°i c√°c ƒëi·ªÉm Time: {df_all['Time'].iloc[peaks].round(4).tolist()}")
                else:
                    st.write(f"**{c}** kh√¥ng t√¨m th·∫•y peak n√†o.")
        else:
            st.warning("H√£y ch·ªçn √≠t nh·∫•t m·ªôt c·ªôt ƒë·ªÉ v·∫Ω.")